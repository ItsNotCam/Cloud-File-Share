"use client"

import React, { useState } from "react"
import axios, { AxiosError, AxiosProgressEvent } from 'axios';
import ProgressBar from 'react-bootstrap/ProgressBar';
import './upload-form.css'

interface IResponseMsg {
  errors: string[]
}

export default function UploadForm(props: {SERVER_SOCKET: string}): JSX.Element {
  const [file, setFile] = useState<File>()
  const [uploadingProgress, setUploadingProgress] = useState<number>(0)
  const [isUploading, setIsUploading] = useState<boolean>(false)
  const [uploadFailed, setUploadFailed] = useState<boolean>(false)
  const [uploadFailedReasons, setUploadFailedReasons] = useState<string[]>([])
  const [uploadSuccess, setUploadSuccess] = useState<boolean>(false)

  const [email, setEmail] = useState<string>("")
  const [username, setUsername] = useState<string>("")
  const [password, setPassword] = useState<string>("")

  const uploadFile = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault()
    if(!file) {
      alert("failed to upload - no file was present")
      return
    }

    try {
      const data = new FormData()
      data.set('file', file)
      data.set('filesize', file.size.toString())
      
      setIsUploading(true)
      axios.post(`http://${props.SERVER_SOCKET}/api/files/upload`, data, {
        headers: { 'Content-Type': 'multipart/form-data' },
        onUploadProgress: (event: AxiosProgressEvent) => {
          const progress: number = event.loaded / (event.total || 9999999) * 100
          setUploadingProgress(progress)
        }
      }).then((resp) => {
        // console.log(resp.data)
        setIsUploading(false)
        setUploadingProgress(0)
      })
    } catch (e: any) {}
  }

  const createUser = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault()
    const data = {
      EMAIL: email,
      PASSWORD: password,
      USERNAME: username
    }

    await axios.post(`http://${props.SERVER_SOCKET}/api/users/create`, data, {
      headers: { 'Content-Type': 'application/json' },
    }).then(resp => {
      setEmail("")
      setPassword("")
      setUsername("")
      setUploadFailed(false)
      setUploadSuccess(true)
      setUploadFailedReasons([])
      setTimeout(() => {
        setUploadSuccess(false)
      }, 5000)

    }).catch(e => {
      const axiosError: AxiosError = e as AxiosError
      const data: IResponseMsg = axiosError.response?.data as IResponseMsg
      const errorMessages: string[] = data.errors
      setUploadFailed(true)
      setUploadSuccess(false)
      setUploadFailedReasons(errorMessages)
    })
  }

  return (
    <div>
      <br />
      <form onSubmit={(event) => createUser(event)}>
        <div className="container">
          <div className="mb3">
            <label htmlFor="USERNAME" className="form-label">Username</label>
            <input 
              className="form-control"
              type="text" 
              name="USERNAME" 
              onChange={(e) => setUsername(e.target.value)} 
              value={username}/> 
          </div>
          <br />
          <div className="mb3">
            <label htmlFor="EMAIL" className="form-label">Email</label>
            <input 
              className="form-control"
              type="text" 
              name="EMAIL" 
              onChange={(e) => setEmail(e.target.value)} 
              value={email}/> 
          </div>
          <br />
          <div className="mb3">
            <label htmlFor="PASSWORD" className="form-label">Password</label>
            <input 
              className="form-control"
              type="text" 
              id="password"
              name="PASSWORD"
              onChange={(e) => setPassword(e.target.value)} 
              value={password}/> 
          </div>
          <br />
          <button type="submit" className="btn btn-primary">
            Submit
          </button>
          
          <br />
          <br />

          {uploadFailed ? uploadFailedReasons.map(reason => 
            <div className="alert alert-danger" role="alert">
              {reason}
            </div>
          ) : ""}

          {uploadSuccess ? 
            <div className="alert alert-success" role="alert">
              User created successfully!
            </div> 
          : ""}
        </div>
      </form>
      <br />
      <br />
      <form onSubmit={(event) => uploadFile(event)}>
        <input type="file" name="file" onChange={(e) => setFile(e.target.files?.[0])}/>
        <input type="submit" value="Upload" disabled={file == null}/>
      </form>
      {isUploading && <><br /><ProgressBar now={uploadingProgress} /></>}
    </div>
  )
}